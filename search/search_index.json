{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Info A TypeScript wrapper to Eryn 's verify api . This wrapper allows you to implement features that relate in some way to connecting Roblox to Discord.","title":"Info"},{"location":"#info","text":"A TypeScript wrapper to Eryn 's verify api . This wrapper allows you to implement features that relate in some way to connecting Roblox to Discord.","title":"Info"},{"location":"handling-rejections/","text":"Handling Rejections When a Promise rejects, it will give the following object: { \"error\": \"error message\" } If the promise fails because of a technical problem with the request library, then it will give the full error given by the request promise. The error property will still exist.","title":"Handling Rejections"},{"location":"handling-rejections/#handling-rejections","text":"When a Promise rejects, it will give the following object: { \"error\": \"error message\" } If the promise fails because of a technical problem with the request library, then it will give the full error given by the request promise. The error property will still exist.","title":"Handling Rejections"},{"location":"installation/","text":"Installation In the npm project you want to use ts-verify-eryn-api in run the following command: npm install ts-verify-eryn-api Then you can import it like so: import * as verify from \"ts-verify-eryn-api\" Then you can access the exports provided by the library.","title":"Installation"},{"location":"installation/#installation","text":"In the npm project you want to use ts-verify-eryn-api in run the following command: npm install ts-verify-eryn-api Then you can import it like so: import * as verify from \"ts-verify-eryn-api\" Then you can access the exports provided by the library.","title":"Installation"},{"location":"library-exports/","text":"Library Exports Types DiscordUserId type DiscordUserId = string; This type represents the ID of an user account on Discord. RobloxUserId type RobloxUserId = number; This type represents the ID of an user account on Roblox. Interfaces RobloxUser interface RobloxUser { id: RobloxUserId, username: string } This interface represents a user on the Roblox platform given by the verification api. id The user ID of the Roblox user. username The username of the Roblox user. Functions discordUserIDToRobloxUserID function discordUserIDToRobloxUserID(discordUserId: DiscordUserId): Promise<RobloxUser> Searches for the discordUserId provided that is associated with a RobloxUser. If no RobloxUser is found, then the Promise fails. discordUserId The Discord user ID to search up. Example Resolve { id: 1, username: \"ROBLOX\" } See RobloxUser for more info about the resolve. robloxUserIDToDiscordUserIDs function robloxUserIDToDiscordUserIDs(robloxUserId: RobloxUserId): Promise<DiscordUserId[]> Looks up the Roblox user ID and returns an array of Discord user IDs that are attached to this Roblox user. If the user has not attached a Discord account to the Roblox user then you get an empty array. robloxUserId The Roblox user ID to search up. Example Resolve [ \"12345678901234\" ]","title":"Library Exports"},{"location":"library-exports/#library-exports","text":"","title":"Library Exports"},{"location":"library-exports/#types","text":"","title":"Types"},{"location":"library-exports/#discorduserid","text":"type DiscordUserId = string; This type represents the ID of an user account on Discord.","title":"DiscordUserId"},{"location":"library-exports/#robloxuserid","text":"type RobloxUserId = number; This type represents the ID of an user account on Roblox.","title":"RobloxUserId"},{"location":"library-exports/#interfaces","text":"","title":"Interfaces"},{"location":"library-exports/#robloxuser","text":"interface RobloxUser { id: RobloxUserId, username: string } This interface represents a user on the Roblox platform given by the verification api.","title":"RobloxUser"},{"location":"library-exports/#id","text":"The user ID of the Roblox user.","title":"id"},{"location":"library-exports/#username","text":"The username of the Roblox user.","title":"username"},{"location":"library-exports/#functions","text":"","title":"Functions"},{"location":"library-exports/#discorduseridtorobloxuserid","text":"function discordUserIDToRobloxUserID(discordUserId: DiscordUserId): Promise<RobloxUser> Searches for the discordUserId provided that is associated with a RobloxUser. If no RobloxUser is found, then the Promise fails.","title":"discordUserIDToRobloxUserID"},{"location":"library-exports/#discorduserid_1","text":"The Discord user ID to search up.","title":"discordUserId"},{"location":"library-exports/#example-resolve","text":"{ id: 1, username: \"ROBLOX\" } See RobloxUser for more info about the resolve.","title":"Example Resolve"},{"location":"library-exports/#robloxuseridtodiscorduserids","text":"function robloxUserIDToDiscordUserIDs(robloxUserId: RobloxUserId): Promise<DiscordUserId[]> Looks up the Roblox user ID and returns an array of Discord user IDs that are attached to this Roblox user. If the user has not attached a Discord account to the Roblox user then you get an empty array.","title":"robloxUserIDToDiscordUserIDs"},{"location":"library-exports/#robloxuserid_1","text":"The Roblox user ID to search up.","title":"robloxUserId"},{"location":"library-exports/#example-resolve_1","text":"[ \"12345678901234\" ]","title":"Example Resolve"}]}